<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dotty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_scores=false;
score_alpha=0;
dotty_color = getRandomColor();
dotty_angle = random(46)-23;
dotty_timer = 80;
dotty_visible = false;
dotty_size_timer = 20;
dotty_max_size = 2;
dotty_size = 2;
dotty_move_timer=0;
share_surface = surface_create(1080,720);

leaderboard_move_timer=121;

if(instance_number(dot)==0){

    randomize();
    
    while(instance_number(dot)&lt;2){
        number = instance_number(dot);
        new_dot = instance_create(360+360*number, 1200+120*number, dot);
        new_dot.grow_speed = 10;
        new_dot.max_size = 150 - 50*number;
        new_dot.colorize_buttons = true;
        if(number == 0){
            new_dot.start_button = true;
        }else{
            new_dot.score_button = true;
        }
    }
}else{
    for(var i=0; i&lt;2; i++){
        current_dot = instance_find(dot, i);
        number = i;
        
        current_dot.to_x = 360+360*number;
        current_dot.to_y = 1200+120*number;
        
        current_dot.x_step = (current_dot.to_x - current_dot.x) / 60;
        current_dot.y_step = (current_dot.to_y - current_dot.y) / 60;
        
        current_dot.max_size = 150 - 50*number;
        current_dot.grow_speed = abs(current_dot.max_size - current_dot.r)/60;
        current_dot.grow_direction = current_dot.max_size - current_dot.r;
        current_dot.colorize_buttons = true;
        
        if(number == 0){
            current_dot.start_button = true;
        }else{
            current_dot.score_button = true;
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(draw_scores &amp;&amp; score_alpha&lt;1){
    score_alpha+=0.009;
}

leaderboard_move_timer+=2;

dotty_size_timer--;
if(dotty_size_timer&gt;=0){
    dotty_size = (dotty_max_size-(dotty_max_size*(dotty_size_timer/20)))*2;
    if(dotty_size&gt;dotty_max_size){
        dotty_size=dotty_max_size;
    }
}

dotty_move_timer+=0.5;

dotty_timer--;
if(dotty_timer&gt;=20 &amp;&amp; dotty_timer&lt;21){
    if(os_browser != browser_not_a_browser){
        sound_play(snd_dotty);
    }else{
        audio_play_sound(snd_dotty, 10, false);
    }
}
if(dotty_timer&lt;=0 &amp;&amp; !dotty_visible){

    //set dotty font
    dotty_color = getRandomColor();
    dotty_angle = random(70)-30;
    dotty_max_size = random(0.2)+0.4;

    dotty_visible = true;
    dotty_size_timer = 20;
    dotty_size=0;
    
    if(os_browser!=browser_not_a_browser){
        if(sound_isplaying(snd_grow)){
            sound_stop(snd_grow);
        }
        sound_play(snd_grow);
    }else{
        audio_play_sound(snd_grow, 10, false);
    }

    //create drops
    drop_emitter = instance_create(540, 250, obj_drop_emitter);
    drop_emitter.r = 400;
    drop_emitter.color = dotty_color;
    drop_emitter.length = 500;
}
if(dotty_timer&lt;=-90){
    if (os_browser != browser_not_a_browser){
        if(!sound_isplaying(snd_song)){
            sound_loop(snd_song);
        }
        sound_volume(snd_song, 0.25);
    }else{
        if(!audio_is_playing(snd_song)){
            audio_play_sound(snd_song, 11, true);
        }
        audio_sound_gain(snd_song, 0.25, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//is logo clicked
if(mouse_y &lt; 650 &amp;&amp; dotty_visible){
    dotty_visible = false;  
    if(os_browser!=browser_not_a_browser){
        if(sound_isplaying(snd_plop)){
            sound_stop(snd_plop);
        }
        sound_play(snd_plop);
    }else{
        audio_play_sound(snd_plop,10,false);
    }
}

//is button clicked
for(i=0; i&lt;instance_number(dot); i+=1){
    current_dot = instance_find(dot, i);
    
    x_dist = mouse_x - current_dot.x;
    y_dist = mouse_y - current_dot.y;
    if(current_dot.to_x==-1 &amp;&amp; current_dot.angle==-1){
        if((x_dist*x_dist + y_dist*y_dist)&lt;(current_dot.r*current_dot.r)){
            
            if(current_dot.start_button){
                with(current_dot){
                    shrink=true;
                    stop=true;
                    pressed=true;
                }
                with(instance_find(dot,(i+1)%2)){
                    shrink=true;
                    stop=true;
                }
                break;
            }else{
                with(current_dot){
                    stop=true;
                    to_x = 1820;
                    to_y = y-60;
                    x_step = (to_x - x) / 60;
                    y_step = (to_y - y) / 60;
                }
                with(instance_find(dot,(i+1)%2)){
                    stop=true;
                    to_x = 180;
                    to_y=1650;
                    x_step = (to_x - x) / 60;
                    y_step = (to_y - y) / 60;
                }
                instance_find(obj_menu,0){
                    draw_scores = true;
                }
                break;
            }
        }
    }
}

if(os_browser!=browser_not_a_browser){
    if(mouse_x&gt;0 &amp;&amp; mouse_x&lt;540 &amp;&amp; mouse_y&gt;1600 &amp;&amp; mouse_y&lt;1900){
        url_open_ext('https://play.google.com/store/apps/details?id=com.ruerob.dotty', "_blank");
        
    }else if(mouse_x&gt;540 &amp;&amp; mouse_y&gt;1600 &amp;&amp; mouse_y&lt;1900){
        url_open_ext('https://ruerob.itch.io/dotty', "_blank");
    }
}else{
    if(draw_scores){
        if(mouse_x&gt;272 &amp;&amp; mouse_x&lt;528 &amp;&amp; mouse_y&gt;1222 &amp;&amp; mouse_y&lt;1478){
            if(achievement_login_status()){
                achievement_show_leaderboards();
            }
            
        }else if(mouse_x&gt;522 &amp;&amp; mouse_x&lt;778 &amp;&amp; mouse_y&gt;1422 &amp;&amp; mouse_y&lt;1678){
            if(achievement_login_status()){
                achievement_show_achievements();
            }
            
        }
    }

    if(mouse_x&gt;980 &amp;&amp; mouse_y&gt;1820 &amp;&amp; instance_number(dotter)&gt;0){
        surface_save(share_surface, "screenshot.png");    
        
        with(instance_find(dotter,0)){
            var pointsString, i;
            pointsString = string(points);
            for (i = string_length(pointsString) - 2; i &gt; 1; i -= 3) {
                pointsString = string_insert(".", pointsString, i);
            }
            
            share_ext_prepare();
            share_ext_add_image("screenshot.png");
            share_ext_add_text("I've scored " + pointsString + " points in " + time_played_string + " and clicked " + string(dots_clicked) +" dots in Dotty!");
            share_ext_add_url("https://play.google.com/store/apps/details?id=com.ruerob.dotty");
            share_ext_launch();
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(dotty_color);
draw_set_font(font_dotty);

draw_set_halign(fa_center);
if(dotty_visible){
    draw_sprite_ext(spr_dotty, -1, 540, 300, dotty_size, dotty_size, dotty_angle, dotty_color, 1);
}

draw_set_color(c_white);

if(draw_scores){

    draw_set_alpha(score_alpha);   
    draw_set_font(font_ubu_mono_big);  
    
    var x_pos=320;
    var stelle=10;
    var first = highscore_value(1);
    while(first&gt;stelle){
        stelle*=10;
        x_pos+=60;
    }
    
    

    var pointsString, j;
    pointsString = string(highscore_value(1));
    for (j = string_length(pointsString) - 2; j &gt; 1; j -= 3) {
        pointsString = string_insert(".", pointsString, j);
    }
    
    draw_set_halign(fa_left);
    draw_set_font(font_ubu_mono_small);
    draw_text(470, 670, "Highest scores");
    draw_text(220, 850, "Most dots");
    draw_text(370, 1030, "Longest time");

    draw_set_halign(fa_center);
    draw_set_font(font_ubu_mono_big);
    draw_text(540, 725, string(pointsString));
    draw_text(540, 905, string(global.dots));
    draw_text(540, 1085, getTimePlayedString(global.time));

    
    draw_set_alpha(1);
    
    var google_alpha = score_alpha;
    
    if(!achievement_login_status() &amp;&amp; google_alpha&gt;0.5){
        google_alpha=0.5;
    }
    
    move = cos(degtorad(leaderboard_move_timer*0.4));
    draw_sprite_ext(spr_leader,0,400,1350,1+0.09*move, 1+0.09*move, 5*move,c_white,google_alpha);
    
    move = cos(degtorad(leaderboard_move_timer*-0.5));
    draw_sprite_ext(spr_achieve,0,650,1550,1+0.09*move, 1+0.09*move, 5*move,c_white,google_alpha);
    
    
}else if(os_browser!=browser_not_a_browser){
    draw_sprite_ext(spr_google_play,0,270,1700,1.8,1.8,0,c_white,1);
    draw_sprite_ext(spr_itch,0,810,1700,0.75,0.75,0,c_white,1);
}

//Draw the surface that is used for the share buttons screenshot
if(!surface_exists(share_surface)){
    share_surface = surface_create(1080,720);
}

surface_set_target(share_surface);

draw_clear(c_black);

draw_sprite_ext(spr_dotty, -1, 540, 300, dotty_max_size, dotty_max_size, dotty_angle, dotty_color, 1);

with(instance_find(dotter,0)){
    // points collected calc string
    var pointsString, i;
    pointsString = string(points)
    for (i = string_length(pointsString) - 2; i &gt; 1; i -= 3) {
        pointsString = string_insert(".", pointsString, i)
    }
    //points collected draw
    draw_set_font(font_ubu_mono);
    draw_set_halign(fa_center);
    draw_text(460, 620, string(pointsString));
    
    
    // played time
    draw_set_halign(fa_left);
    draw_set_font(font_ubu_mono_small);
    draw_text(790, 645, time_played_string);
    
    // dots clicked
    draw_set_halign(fa_left);
    draw_set_font(font_ubu_mono_small);
    draw_text(10, 645, string(dots_clicked));
}

surface_reset_target();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
