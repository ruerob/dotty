<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sets the circles starting values

r = 0;
points = 0;
close_to_other = false;
that_was_close_flash = false;

/*var hue = random(256);
var sat = random(256);
var val = 255;



color = make_color_hsv(hue, sat, val);*/
var rnd_snd = random(2);
/*if(rnd_snd&lt;1){
    my_snd = audio_play_sound(snd_grow, 10, true);
}else{
    my_snd = audio_play_sound(snd_grow_02, 10, true);   
}*/
color = getRandomColor();
button_color = color;

grow_speed = (0.65 + random(8)/10)*0.7;
slow_down = 0;
slow_down_to = 0;


//this flag stops growth and hitting calculation
stop=false;
//this flag starts the shrinking of the circle
shrink=false;

//set to true if the button gets clicked in the game so that it adds its points to the players games
creates_points = false;

//these are flags to make circles into buttons
max_size = -1;
start_button = false;
score_button = false;
pulse_offset = random(1000);
pressed=false;

//to automaticly change the position and size of a circle
to_x=-1;
to_y=-1;
grow_direction=1;
x_step=0;
y_step=0;

//this is for the fly away movement when two circles have touched
x_dir = random(75);
y_dir = random(75);

//this is for the touch animation
touch_timer=0;

//angle of the score button
angle=-1;

black_r = 0;
black_x = 0;
black_y = 0;

colorize_buttons = false;

if(os_browser!=browser_not_a_browser){
    if(sound_isplaying(snd_grow)){
        sound_stop(snd_grow);
    }
    sound_play(snd_grow);
}else{
    audio_sound_pitch(snd_grow, random(0.5)+0.75);
    audio_play_sound(snd_grow, 10, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!stop){
    if(max_size&lt;0 || max_size&gt;r){
        if(r&lt;25){
            r+=5;
        }
        r += grow_speed;
        
        for(i=0; i&lt;instance_number(dot); i+=1){
            current_dot = instance_find(dot, i);
        
            x_dist = x - current_dot.x;
            y_dist = y - current_dot.y;
            r_dist = r + current_dot.r;
            
            var current_abst = sqrt(x_dist*x_dist + y_dist*y_dist);
            var min_abst = sqrt(r_dist*r_dist);
            
            if(!current_dot.shrink &amp;&amp; x_dist!=0 &amp;&amp; y_dist!=0 &amp;&amp; (current_abst)&lt;(min_abst)){
            
                if(os_browser != browser_not_a_browser){
                    sound_play(snd_hit);
                }else{
                    audio_play_sound(snd_hit, 10, false);                
                }

                current_dot.touch_timer = 60;
                touch_timer = 60;
            
                current_dotter = instance_find(dotter, 0);
                current_dotter.stop = true;
                current_dotter.time = 0;
                
                for(j=0; j&lt;instance_number(dot); j+=1){
                    with(instance_find(dot, j)){
                        stop = true;
                        shrink=true;
                    }
                }
                current_dot.shrink=false;
                shrink=false;
                
            }
        }
    }
    
}else if(shrink){

    if(creates_points || pressed || score_button){
        black_r+=5+sqr(black_r)/60;
    }else{
        r-=1;
        x+=random(75)-x_dir;
        y+=random(75)-y_dir;
    }
    if(r&lt;0 || (x+r&lt;0 || x-r&gt;1080 || y+r&lt;0 || y-r&gt;1920) || black_r&gt;=sqrt(sqr(x-black_x)+sqr(y-black_y))+r){
        if(creates_points){
            current_dotter = instance_find(dotter, 0);
            current_dotter.to_points += points;
            current_dotter.vibrate += sqrt((points*4)/pi)/20;
            if(current_dotter.vibrate&lt;5)current_dotter.vibrate=5;
            points = 0;
        }
        if(pressed){
            if(start_button){
                with(instance_find(obj_menu,0)){
                    instance_destroy();
                    if(!audio_is_playing(snd_song)){
                        audio_play_sound(snd_song, 10, true);
                    }
                    audio_sound_gain(snd_song, 0.125, 0);
                }
                if(instance_number(dotter)&gt;0){
                    with(instance_find(dotter, 0)){
                        instance_destroy();
                    }
                }
                instance_create(0,0,dotter);
            }
        }
        
        drop_emitter = instance_create(x, y, obj_drop_emitter);
        drop_emitter.r = r;
        drop_emitter.color = color;
        drop_emitter.length = (pi*sqr(r))/2000;
        if(drop_emitter.length&gt;2000){
            drop_emitter.length = 2000;
        }
        
        if(creates_points || pressed || score_button){
            if(os_browser!=browser_not_a_browser){
                if(sound_isplaying(snd_plop)){
                    sound_stop(snd_plop);
                }
                sound_play(snd_plop);
            }else{
                audio_sound_pitch(snd_plop, random(0.5)+0.75);
                audio_play_sound(snd_plop, 10, false);
            }
        }
        //audio_stop_sound(my_snd);
        instance_destroy();
    }
}else{
    if(grow_direction&gt;0){
        if(r&lt;max_size){
            r+=grow_speed;
        }
    }else{
        if(r&gt;max_size){
            r-=grow_speed;
        }
    }
    
    if(angle == -1){
        if(to_x&gt;-1 &amp;&amp; to_y&gt;-1){
            if((x_step&lt;=0 &amp;&amp; x&lt;to_x) || (x_step&gt;0 &amp;&amp; x&gt;to_x)){
                
                x_step=x_step/1.2;
                y_step=y_step/1.2;
                
                if(x_step&lt;1 &amp;&amp; y_step&lt;1){
                    to_x=-1;
                    to_y=-1;
                }
            }
            x+=x_step;
            y+=y_step;
        }
    }else{
        to_x=-1;
        to_y=-1;
        
        var other_dot = instance_find(dot,0);

        if(!other_dot.start_button){
            other_dot = instance_find(dot,1);
        }
        
        if(angle_speed&gt;4.5)
            angle_speed-=0.13;
        
        angle-=angle_speed;
        
        if(angle &lt; -292){
            to_x = 720;
            to_y = 1320;
            angle=-1;
            x_step = (to_x-x) / 15;
            y_step = (to_y-y) / 15;
            to_x -= x_step*10;
            to_y -= y_step*10;
            
        }else if(other_dot.start_button){
            x = r + other_dot.x + other_dot.r;
            y = other_dot.y;
            
            var ang = angle;
            
            ang = ang/(360/(2*pi));
            
            var new_x = other_dot.x + cos(ang) * (x - other_dot.x) - sin(ang) * (y - other_dot.y);
            var new_y = other_dot.y + sin(ang) * (x - other_dot.x) + cos(ang) * (y - other_dot.y);
            
            x = new_x;
            y = new_y;
        }
    }   
}

if(touch_timer&gt;0){
    touch_timer--;
}

if(colorize_buttons &amp;&amp; to_x==-1 &amp;&amp; angle=-1){
    var red = colour_get_red(button_color);
    var green = colour_get_green(button_color);
    var blue = colour_get_blue(button_color);
    
    red-=5;
    green-=5;
    blue-=5;
    if(red&lt;0)red=0;
    if(green&lt;0)green=0;
    if(blue&lt;0)blue=0;
        
    button_color = make_colour_rgb(red, green, blue);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_circle_precision(512);

if(start_button){
    var draw_r = r + 10*cos((current_time+pulse_offset)/500);
    
    draw_set_color(color);
    draw_circle(x,y,draw_r,false);
    
    pos = sqrt((draw_r*draw_r)/2);
    r_piece = draw_r*0.1;
    
    draw_set_color(button_color);
    //draw_triangle(x+(draw_r-r_piece), y, x-pos+r_piece, y-pos+r_piece, x-pos+r_piece, y+pos-r_piece, true);
    draw_line_width(x+(draw_r-r_piece), y,x-pos+r_piece, y-pos+r_piece, 8);
    draw_line_width(x-pos+r_piece, y-pos+r_piece, x-pos+r_piece, y+pos-r_piece,8);
    draw_line_width(x-pos+r_piece, y+pos-r_piece, x+(draw_r-r_piece), y, 8);
    
}else if(score_button){
    var draw_r = r + 10*cos((current_time+pulse_offset)/500);
    
    draw_set_color(color);
    draw_circle(x,y,draw_r,false);

    pos = sqrt((draw_r*draw_r)/2);
    r_piece = draw_r*0.1;
    
    draw_set_color(button_color);
    draw_rectangle(x-pos+(r_piece*2.5), y+pos-r_piece, x+pos-r_piece, y+pos-(2*r_piece), false);
    draw_rectangle(x-pos+(r_piece*2.5), y-(r_piece*0.5), x+pos-r_piece, y+(r_piece*0.5), false);
    draw_rectangle(x-pos+(r_piece*2.5), y-pos+r_piece, x+pos-r_piece, y-pos+(r_piece*2), false);
    
    draw_rectangle(x-pos+r_piece, y+pos-r_piece, x-pos+(2*r_piece), y+pos-(r_piece*2), false);
    draw_rectangle(x-pos+r_piece, y-(r_piece*0.5), x-pos+(r_piece*2), y+(r_piece*0.5), false);
    draw_rectangle(x-pos+r_piece, y-pos+r_piece, x-pos+(r_piece*2), y-pos+(r_piece*2), false);
}else{
    if(touch_timer&gt;15){
        var blend = (1+sin((touch_timer-45)/60.0 * pi))/2.0;
        var neg_blend = 1-blend;
        
        var hue = colour_get_hue(color)*neg_blend + 255*blend;
        var sat = colour_get_saturation(color)*neg_blend + 255*blend;
        var val = colour_get_value(color)*neg_blend + 255*blend;
        
        var new_color = make_colour_hsv(hue, sat, val);
        
        draw_set_color(new_color);
    }else{
        draw_set_color(color);
    }        

    draw_circle(x,y,r,false);
}

if(black_r&gt;0){
    draw_set_color(c_black);
    draw_circle(black_x,black_y,black_r,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
