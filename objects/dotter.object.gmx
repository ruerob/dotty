<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//start values
time = 0;
dot_count = 0;
left_mouse_pressed = 0;
dots_clicked = 0;
next_creation_time = 30 + random(30);
stop = false;
points = 0;
to_points = 0;
vibrate = 0;
angle_speed=0;
swipe=false;
share_move_timer=121;
time_played=0;
time_played_string = '00:00';
that_was_close_streak = 0;

//level values
max_dot_count = 3;
min_time_diff = 30;
max_time_diff = 60;
min_distance = 150;

//values when to increase difficulty
raise_max_dot_count_at = 6 + random(28);
lower_max_time_diff_at = random(40);
lower_min_time_diff_at = random(40);
lower_min_distance_at = random(40);

//screen explosions for reaching the own highscores
dots_reached = false;
time_reached = false;
score_reached = false;

//screen shake variables
screen_shake_intensity=0;
calc_screen_shake=0;

//screen flash when dot popped
flash_screen = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_glitter_emitter) {instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time+=1;
share_move_timer+=2;

if(!stop){
    time_played++;
    getTimePlayedString(time_played);
}

if(time&gt;=next_creation_time &amp;&amp; !stop){
    time=0;
    
    if(instance_number(dot)&lt;max_dot_count){
        next_creation_time = min_time_diff + random(max_time_diff - min_time_diff);
        
        creation_x = 0;
        creation_y = 0;
        
        are_creation_coords_okay=false;
        coords_seeking_tries = 0;
        
        while(!are_creation_coords_okay){
            are_creation_coords_okay=true;
            creation_x = random(1080);
            creation_y = random(1820);
            
            for(i=0; i&lt;instance_number(dot); i+=1){
                current_dot = instance_find(dot, i);
                
                x_dist = creation_x - current_dot.x;
                y_dist = creation_y - current_dot.y;
                if(creation_x == current_dot.x || creation_y == current_dot.y){
                    are_creation_coords_okay = false;
                    break;
                }
                if(coords_seeking_tries&gt;=100000){
                    if((x_dist*x_dist + y_dist*y_dist)&lt;((current_dot.r)*current_dot.r)){
                        are_creation_coords_okay = false;
                        break;
                    }
                }else if(coords_seeking_tries&gt;=5000){
                    if((x_dist*x_dist + y_dist*y_dist)&lt;((current_dot.r+(min_distance/3))*(current_dot.r+(min_distance/3)))){
                        are_creation_coords_okay = false;
                        break;
                    }
                }else if(coords_seeking_tries&gt;=2000){
                    if((x_dist*x_dist + y_dist*y_dist)&lt;((current_dot.r+((min_distance/3)*2))*(current_dot.r+((min_distance/3)*2)))){
                        are_creation_coords_okay = false;
                        break;
                    }
                }else if((x_dist*x_dist + y_dist*y_dist)&lt;((current_dot.r+min_distance)*(current_dot.r+min_distance))){
                    are_creation_coords_okay = false;
                    break;
                }
            }
            coords_seeking_tries++;
        }
        
        instance_create(creation_x, creation_y, dot);
    }
}

if(to_points &gt; points){
    var add = floor((to_points-points)/2);
    
    if(add&gt;30574)add=15287;
    else if(add&gt;1637) add=1637;
    else if(add==0)add+=1;
    
    points += add;
    if(!score_reached &amp;&amp; points&gt;=highscore_value(1)){
        score_reached=true;
        drop_emitter = instance_create(540, 1850, obj_drop_emitter);
        drop_emitter.r = 250;
        drop_emitter.color = make_color_rgb(255,215,0);
        drop_emitter.length = 200;
        
        glitter_emitter = instance_create(460, 1920, obj_glitter_emitter);
        glitter_emitter.r = 250;
        glitter_emitter.color = make_color_rgb(255,215,0);
        glitter_emitter.length = 10;
    }
}

if(!dots_reached &amp;&amp; dots_clicked&gt;=global.dots){
    dots_reached=true;
    drop_emitter = instance_create(50, 1870, obj_drop_emitter);
    drop_emitter.r = 70;
    drop_emitter.color = make_color_rgb(255,215,0);
    drop_emitter.length = 30;
    
    glitter_emitter = instance_create(50, 1920, obj_glitter_emitter);
    glitter_emitter.r = 70;
    glitter_emitter.color = make_color_rgb(255,215,0);
    glitter_emitter.length = 5;
}

if(!time_reached &amp;&amp; time_played&gt;=global.time){
    time_reached=true;
    drop_emitter = instance_create(870, 1870, obj_drop_emitter);
    drop_emitter.r = 120;
    drop_emitter.color = make_color_rgb(255,215,0);
    drop_emitter.length = 30;
    
    glitter_emitter = instance_create(870, 1920, obj_glitter_emitter);
    glitter_emitter.r = 120;
    glitter_emitter.color = make_color_rgb(255,215,0);
    glitter_emitter.length = 7;
}

if(screen_shake_intensity &gt; 0){
    view_xview = random(screen_shake_intensity*2) - screen_shake_intensity;
    view_yview = random(screen_shake_intensity*2) - screen_shake_intensity;
    screen_shake_intensity--;
}else{
    view_xview = 0;
    view_yview = 0;
}

if(flash_screen &gt; 0){
    flash_screen--;
}else{
    with(obj_background){
        color= c_black;
    }
}

if(stop){
    var first_dot = instance_find(dot,0);
    var second_dot = instance_find(dot,1);
    if(instance_number(dot)==2 &amp;&amp; instance_number(obj_drop)==0 &amp;&amp; instance_number(obj_menu)==0 &amp;&amp; to_points==points &amp;&amp; first_dot.touch_timer==0){
        instance_create(256,192,obj_menu);
        highscore_add("", points);

        if(global.dots &lt; dots_clicked){
            global.dots = dots_clicked;
        }
        
        if(global.time &lt; time_played){
            global.time = time_played;
        }
                
        if (file_exists("highscore.sav")) file_delete("highscore.sav");
        ini_open("highscore.sav"); //opens file for writing and reading. If doesn't exist, Game Maker creates it

        ini_write_real("Highscore", "score", highscore_value(1));
        ini_write_real("Highscore", "dots", global.dots);
        ini_write_real("Highscore", "time", global.time);        
        
        ini_close();
        
        if (achievement_available()){
            achievement_post_score("CgkIwqDI_O4EEAIQAQ", points);
            achievement_post_score("CgkIwqDI_O4EEAIQDg", dots_clicked);
            achievement_post_score("CgkIwqDI_O4EEAIQDw", floor((time_played/room_speed)*1000));
                        
            show_debug_message('points_posted');
            
            achievement_increment('CgkIwqDI_O4EEAIQCA', dots_clicked);
            achievement_increment('CgkIwqDI_O4EEAIQCQ', dots_clicked);
            achievement_increment('CgkIwqDI_O4EEAIQCg', dots_clicked);
            achievement_increment('CgkIwqDI_O4EEAIQCw', dots_clicked);
            achievement_increment('CgkIwqDI_O4EEAIQDA', dots_clicked);
            
            if(points &gt;= 1000000){
                achievement_post('CgkIwqDI_O4EEAIQAg', 100);
                show_debug_message('1.000.000 points');
            }
            
            if(points &gt;= 10000000){
                achievement_post('CgkIwqDI_O4EEAIQBA', 100);
                show_debug_message('10.000.000 points');
            }
            
            if(points &gt;= 15000000){
                achievement_post('CgkIwqDI_O4EEAIQAw', 100);
                show_debug_message('15.000.000 points');
            }
            
            if(points &gt;= 20000000){
                achievement_post('CgkIwqDI_O4EEAIQBQ', 100);
                show_debug_message('20.000.000 points');
            }
            
            if(points &gt;= 25000000){
                achievement_post('CgkIwqDI_O4EEAIQBg', 100);
                show_debug_message('25.000.000 points');
            }
            
            if(points &gt;= 30000000){
                achievement_post('CgkIwqDI_O4EEAIQBw', 100);
                show_debug_message('30.000.000 points');
            }
        }

        
        //angle calculation
        var a = second_dot.y - first_dot.y;
        var b = second_dot.x - first_dot.x;
        var c = sqrt(a*a + b*b);
        var angle = 0;
        
        if (c != 0){
            var angle = arcsin(abs(a)/c);
            angle = (360/(2*pi))*angle;
            
            if(a&gt;0 &amp;&amp; b&lt;0){
                angle = 90 + (90-angle);
            }else if(a&lt;0 &amp;&amp; b&lt;0){
                angle = 180 + angle;
            }else if(a&lt;0 &amp;&amp; b&gt;0){
                angle = 270 + (90 - angle);
            }
        }
        
        second_dot.angle = angle;
        second_dot.angle_speed = (angle+315) / 45;
    }
}

if(device_mouse_check_button_pressed(0, mb_left))
{
    swipe = true;
}

if(swipe == true &amp;&amp; !stop){
    
    for(i=0; i&lt;instance_number(dot); i+=1){
        current_dot = instance_find(dot, i);
        for(var dev = 0; dev&lt;5; dev++){
            if(device_mouse_check_button(dev, mb_left)){
                x_dist = device_mouse_x(dev) - current_dot.x;
                y_dist = device_mouse_y(dev) - current_dot.y;
                
                if((x_dist*x_dist + y_dist*y_dist)&lt;(current_dot.r*current_dot.r) &amp;&amp; current_dot.stop == false){
                    
                    with(current_dot){
                        shrink=true;
                        stop=true;
                        creates_points=true;
                        points = floor((r*r*pi) / 4);
                        depth=20;
                        black_x = mouse_x;
                        black_y = mouse_y;
                    }
                    
                    dots_clicked+=1;
                    if(dots_clicked&gt;=raise_max_dot_count_at){
                        max_dot_count+=1;
                        raise_max_dot_count_at = dots_clicked + 8 + random(18*(max_dot_count-1));
                    }
                    if(dots_clicked&gt;=lower_min_time_diff_at &amp;&amp; min_time_diff &gt; 2){
                        min_time_diff-=1;
                        lower_min_time_diff_at = dots_clicked + random(40);
                    }
                    if(dots_clicked&gt;=lower_max_time_diff_at  &amp;&amp; min_time_diff &gt; 10){
                        max_time_diff-=1;
                        lower_max_time_diff_at = dots_clicked + random(40);
                    }
                    if(dots_clicked&gt;=lower_min_distance_at &amp;&amp; min_distance&gt;90){
                        min_distance-=3;
                        lower_min_distance_at = dots_clicked + random(40);
                    }
                    break;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>swipe = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y=1820;

draw_set_alpha(0.75);
draw_set_colour(c_black);

draw_rectangle(0,y,1080,2220,false);

draw_set_alpha(1);


// dots clicked
if(dots_clicked&lt;global.dots){
    draw_set_colour(c_white);
}else{
    draw_set_colour(make_color_rgb(255,215,0));
}

draw_set_halign(fa_left);
draw_set_font(font_ubu_mono_small);
draw_text(10, y+30, string(dots_clicked));


// points collected calc string
var pointsString, i;
pointsString = string(points)
for (i = string_length(pointsString) - 2; i &gt; 1; i -= 3) {
    pointsString = string_insert(".", pointsString, i)
}
//points collected draw

if(points&lt;highscore_value(1)){
    draw_set_colour(c_white);
}else{
    draw_set_colour(make_color_rgb(255,215,0));
}
draw_set_font(font_ubu_mono);
draw_set_halign(fa_center);
draw_text(460, y+5, string(pointsString));


// played time
if(time_played&lt;global.time){
    draw_set_colour(c_white);
}else{
    draw_set_colour(make_color_rgb(255,215,0));
}
draw_set_halign(fa_left);
draw_set_font(font_ubu_mono_small);
draw_text(790, y+30, time_played_string);

// Share button

var alpha = 0.25;
if(instance_number(obj_menu)&gt;0 &amp;&amp; os_browser==browser_not_a_browser){
    alpha=1;
}

move = cos(degtorad(share_move_timer));
draw_sprite_ext(spr_share, 0, 1035, 1875, 1+0.1*move, 1+0.1*move, 10*move, c_white, alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
